<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Packetfire</title><link>https://packetfire.org/post/</link><description>Recent content in Posts on Packetfire</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Dec 2020 00:00:00 -0400</lastBuildDate><atom:link href="https://packetfire.org/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Brainpan Boot2Root Write-Up</title><link>https://packetfire.org/post/brainpan-boot2root-writeup/</link><pubDate>Tue, 22 Dec 2020 00:00:00 -0400</pubDate><guid>https://packetfire.org/post/brainpan-boot2root-writeup/</guid><description>Introduction: Brainpan was an interesting challenge as it had many pivots and took hours over the span of two days to complete. I found that I quickly gained access to the host but was stuck trying to find a way to excalate an unprivileged account to root. Local scans made it seem like there maybe were a few ways to reach root though I ended up achieving the escalation via a kernel exploit that I&amp;rsquo;d never had the opportunity to attempt yet.</description></item><item><title>Internal Boot2Root Write-Up</title><link>https://packetfire.org/post/internal-boot2root-writeup/</link><pubDate>Sat, 05 Dec 2020 00:00:00 -0400</pubDate><guid>https://packetfire.org/post/internal-boot2root-writeup/</guid><description>Introduction: The Internal host took almost 24 hours to complete due to the sheer number of pivots required to complete it. Unlike many of the other boot2roots I&amp;rsquo;ve completed on THM, this host required a significant amount of review and manual poking around on the host, above and beyond the results of automated enumeration tools like linPEAS. I thought it was incredibly brilliant machine.
Environment The attack takes place on a flat network consisting of the attack host, a freshly-booted Kali Linux livecd, and the target host.</description></item><item><title>Daily Bugle Boot2Root Write-Up</title><link>https://packetfire.org/post/daily-bugle-boot2-root-writeup/</link><pubDate>Fri, 27 Nov 2020 00:00:00 -0400</pubDate><guid>https://packetfire.org/post/daily-bugle-boot2-root-writeup/</guid><description>Introduction: The Daily Bugle challenge was exceptionally difficult compared to challenges that I&amp;rsquo;ve attempted in the past. It was incredibly easy to rabbithole down paths if I wasn&amp;rsquo;t diligent both in thinking about how to collect information but in documenting the information that I had gathered. In this post, I&amp;rsquo;ll talk through my experience in tackling this challenge and especially focus on the rabbitholes I fell victim to, however it may be difficult to fully capture the amount of time spent in these in writing.</description></item><item><title>Hackpark Boot2Root Write-Up</title><link>https://packetfire.org/post/hackpark-boot2-root-writeup/</link><pubDate>Mon, 23 Nov 2020 00:00:00 -0400</pubDate><guid>https://packetfire.org/post/hackpark-boot2-root-writeup/</guid><description>Introduction: The Hackpark challenge was deceptively simple in the initial exploratory phase. I had gained a ton of ground early on while I established a foothold on the host but discovering a pivot point from a low-privileged user to System took me significantly longer, primarily due to my unfamiliarity with Windows.
Environment The attack takes place on a flat network consisting of the attack host, a freshly-booted Kali Linux livecd, and the the target host.</description></item><item><title>Kenobi Boot2Root Write-Up</title><link>https://packetfire.org/post/kenobi-boot2-root-writeup/</link><pubDate>Sat, 14 Nov 2020 13:43:28 -0400</pubDate><guid>https://packetfire.org/post/kenobi-boot2-root-writeup/</guid><description>Introduction: The Kenobi boot2root challenge was a ton of fun because it required multiple pivots to learn enough to leak a key. On my first pass, I overlooked the NFS server which really impressed the importance of carefully reviewing scans.
Environment The attack takes place on a flat network consisting of the attack host, a freshly-booted Kali Linux livecd, and the the target host which I knew contained 2 flags to capture.</description></item><item><title>Blue Boot2Root Write-Up</title><link>https://packetfire.org/post/blue-boot2-root-writeup/</link><pubDate>Wed, 11 Nov 2020 13:43:28 -0400</pubDate><guid>https://packetfire.org/post/blue-boot2-root-writeup/</guid><description>Introduction: After participating in the Disney Can-You-Hack-It CTF, I&amp;rsquo;ve been trying to spend more of my time studying security and offensive penetration testing. My main goal is to balance understanding how to effectively perform an attack with the awesome frameworks out there like metasploit while gaining a better understanding of what this framework is doing under the hood. This post is the first of many that will follow me documenting both the attacks and my methodologies.</description></item><item><title>Intro to BGP with BIRD</title><link>https://packetfire.org/post/intro-to-bgp/</link><pubDate>Sat, 13 Jun 2020 13:43:28 -0400</pubDate><guid>https://packetfire.org/post/intro-to-bgp/</guid><description>Introduction: Border Gateway Protocol (BGP) is one of the core technologies involved in making our internet work, allowing networks to communicate their routes among eachother. Understanding how this tool can be used to define the topology of a network will both give you a better understanding of how internetworking and allow you translate this robustness into your own network.
By the end of this tutorial, you will be familiar with the core concepts of BGP and have the proper vocabulary to communicate this to another network engineer.</description></item><item><title>Using Makefiles with Go</title><link>https://packetfire.org/post/using-makefiles-with-go/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate><guid>https://packetfire.org/post/using-makefiles-with-go/</guid><description>Introduction: One of my favorite features of golang is its simple toolchain for builds. However at times, I&amp;rsquo;ve wished that I could easily add tasks to a build step. Using GNU Make, I&amp;rsquo;ve found that I can quickly and easily wrap the go toolchain in a consistent way that leaves plenty of room for customization.
Wrapping Common Go Commands: Primarily, I&amp;rsquo;ve been able to get away with 1:1 mapping of many of the go tool chain directly behind corresponding make commands.</description></item><item><title>Building a Docker-based Development Environment for Concourse-CI</title><link>https://packetfire.org/post/concourse-dev-environment/</link><pubDate>Sun, 25 Mar 2018 19:57:07 -0400</pubDate><guid>https://packetfire.org/post/concourse-dev-environment/</guid><description>Introduction: Jenkins has predominantly been the bread and butter CI/CD tool for technology organizations, where very few tools have been able to compete with the expressiveness of its Groovy-based DSL and the extensibility of its plugin ecosystem. That being said, its tool API is not very straightforward and its configuration lends itself to eventually becoming a snowflake server on an organization&amp;rsquo;s network. Because of this, I&amp;rsquo;m always looking for new CI/CD tools to play with.</description></item><item><title>Intro to IPTables with Service-Based Firewalls</title><link>https://packetfire.org/post/intro-to-iptables/</link><pubDate>Thu, 07 Sep 2017 19:57:07 -0400</pubDate><guid>https://packetfire.org/post/intro-to-iptables/</guid><description>Introduction: IPTables is a stateful firewall implemented via the netfilter kernel module. To many, learning iptables can be a daunting task, however when stuctured correctly an iptables firewall can be both simple to understand and easily automated. This tutorial will function as the first in a series of articles focused on firewalling with iptables.
In this tutorial, we will focus on creating a comprehensible firewall focused on filtering out traffic to the localhost.</description></item></channel></rss>