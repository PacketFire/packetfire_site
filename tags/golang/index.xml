<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Packetfire</title><link>https://packetfire.org/tags/golang/</link><description>Recent content in golang on Packetfire</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://packetfire.org/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>paste.click</title><link>https://packetfire.org/project/pasteclick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://packetfire.org/project/pasteclick/</guid><description/></item><item><title>Using Makefiles with Go</title><link>https://packetfire.org/post/using-makefiles-with-go/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate><guid>https://packetfire.org/post/using-makefiles-with-go/</guid><description>Introduction: One of my favorite features of golang is its simple toolchain for builds. However at times, I&amp;rsquo;ve wished that I could easily add tasks to a build step. Using GNU Make, I&amp;rsquo;ve found that I can quickly and easily wrap the go toolchain in a consistent way that leaves plenty of room for customization.
Wrapping Common Go Commands: Primarily, I&amp;rsquo;ve been able to get away with 1:1 mapping of many of the go tool chain directly behind corresponding make commands.</description></item></channel></rss>